<?xml version="1.0" encoding="utf-8"?>
<as_xml appnam="angelcad">
	<as_class verified="1" name="IStream">
		<as_member_function verified="1" signature="IStream&amp; clearbuffer()" name="clearbuffer">
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; getline(string&amp;out szString)" name="getline">
			<as_parameter verified="1" type="string&amp;" name="szString"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; getline(string&amp;out szString, const string&amp;in szDelim)" name="getline">
			<as_parameter verified="1" type="string&amp;" name="szString"/>
			<as_parameter verified="1" type="const string&amp;" name="szDelim"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; ignore(int64 n = 1, const string&amp;in szDelim = EOF)" name="ignore">
			<as_parameter verified="1" type="int64" name="n" default="1"/>
			<as_parameter verified="1" type="const string&amp;" name="szDelim" default="EOF"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; opShr(bool&amp;out fValue)" name="opShr">
			<as_parameter verified="1" type="bool" name="fValue"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; opShr(double&amp;out flValue)" name="opShr">
			<as_parameter verified="1" type="double" name="flValue"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; opShr(float&amp;out flValue)" name="opShr">
			<as_parameter verified="1" type="float" name="flValue"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; opShr(int&amp;out iValue)" name="opShr">
			<as_parameter verified="1" type="int" name="iValue"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; opShr(int16&amp;out iValue)" name="opShr">
			<as_parameter verified="1" type="int16" name="iValue"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; opShr(int64&amp;out iValue)" name="opShr">
			<as_parameter verified="1" type="int64" name="iValue"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; opShr(string&amp;out szString)" name="opShr">
			<as_parameter verified="1" type="string&amp;" name="szString"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; opShr(uint&amp;out uiValue)" name="opShr">
			<as_parameter verified="1" type="uint" name="uiValue"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; opShr(uint16&amp;out uiValue)" name="opShr">
			<as_parameter verified="1" type="uint16" name="uiValue"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; opShr(uint64&amp;out uiValue)" name="opShr">
			<as_parameter verified="1" type="uint64" name="uiValue"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; seekg(int64 iOffset, seekdir way)" name="seekg">
			<as_parameter verified="1" type="int64" name="iOffset"/>
			<as_parameter verified="1" type="seekdir" name="way"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="IStream&amp; seekg(int64 iPos)" name="seekg">
			<as_parameter verified="1" type="int64" name="iPos"/>
			<as_return type="IStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool bad() const" name="bad">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool eof() const" name="eof">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool fail() const" name="fail">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool good() const" name="good">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool opImplConv() const" name="opImplConv">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int64 tellg() const" name="tellg">
			<as_return type="int64" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void clear()" name="clear">
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="OStream">
		<as_member_function verified="1" signature="OStream&amp; flush()" name="flush">
			<as_return type="OStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="OStream&amp; opShl(bool fValue)" name="opShl">
			<as_parameter verified="1" type="bool" name="fValue"/>
			<as_return type="OStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="OStream&amp; opShl(const string&amp;in szString)" name="opShl">
			<as_parameter verified="1" type="const string&amp;" name="szString"/>
			<as_return type="OStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="OStream&amp; opShl(double flValue)" name="opShl">
			<as_parameter verified="1" type="double" name="flValue"/>
			<as_return type="OStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="OStream&amp; opShl(float flValue)" name="opShl">
			<as_parameter verified="1" type="float" name="flValue"/>
			<as_return type="OStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="OStream&amp; opShl(int64 iValue)" name="opShl">
			<as_parameter verified="1" type="int64" name="iValue"/>
			<as_return type="OStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="OStream&amp; opShl(uint64 uiValue)" name="opShl">
			<as_parameter verified="1" type="uint64" name="uiValue"/>
			<as_return type="OStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="OStream&amp; seekp(int64 iOffset, seekdir way)" name="seekp">
			<as_parameter verified="1" type="int64" name="iOffset"/>
			<as_parameter verified="1" type="seekdir" name="way"/>
			<as_return type="OStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="OStream&amp; seekp(int64 iPos)" name="seekp">
			<as_parameter verified="1" type="int64" name="iPos"/>
			<as_return type="OStream&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool bad() const" name="bad">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool eof() const" name="eof">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool fail() const" name="fail">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool good() const" name="good">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool opImplConv() const" name="opImplConv">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int64 tellp() const" name="tellp">
			<as_return type="int64" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void clear()" name="clear">
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="aatc_funcpointer">
		<as_constructor verified="1" signature="aatc_funcpointer@ aatc_funcpointer()"/>
		<as_member_function verified="1" signature="bool Set(string)" name="Set">
			<as_parameter verified="1" type="string" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool Set(string, ?&amp;in)" name="Set">
			<as_parameter verified="1" type="string" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void Call()" name="Call">
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="array">
		<as_constructor verified="1" signature="T[]@ array(int&amp;in)">
			<as_parameter verified="1" type="int" name=""/>
		</as_constructor>
		<as_constructor verified="1" signature="T[]@ array(int&amp;in, uint length)">
			<as_parameter verified="1" type="int" name=""/>
			<as_parameter verified="1" type="uint" name="length"/>
		</as_constructor>
		<as_constructor verified="1" signature="T[]@ array(int&amp;in, uint length, const T&amp;in value)">
			<as_parameter verified="1" type="int" name=""/>
			<as_parameter verified="1" type="uint" name="length"/>
			<as_parameter verified="1" type="const T&amp;" name="value"/>
		</as_constructor>
		<as_member_function verified="1" signature="T&amp; opIndex(uint index)" name="opIndex">
			<as_parameter verified="1" type="uint" name="index"/>
			<as_return type="T&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="T[]&amp; opAssign(const T[]&amp;in)" name="opAssign">
			<as_parameter verified="1" type="const array&amp;@" name=""/>
			<as_return type="array&amp;@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool empty() const" name="empty">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool isEmpty() const" name="isEmpty">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool opEquals(const T[]&amp;in) const" name="opEquals">
			<as_parameter verified="1" type="const array&amp;@" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="const T&amp; opIndex(uint index) const" name="opIndex">
			<as_parameter verified="1" type="uint" name="index"/>
			<as_return type="const T&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int find(const T&amp;in value) const" name="find">
			<as_parameter verified="1" type="const T&amp;" name="value"/>
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int find(uint startAt, const T&amp;in value) const" name="find">
			<as_parameter verified="1" type="uint" name="startAt"/>
			<as_parameter verified="1" type="const T&amp;" name="value"/>
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int findByRef(const T&amp;in value) const" name="findByRef">
			<as_parameter verified="1" type="const T&amp;" name="value"/>
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int findByRef(uint startAt, const T&amp;in value) const" name="findByRef">
			<as_parameter verified="1" type="uint" name="startAt"/>
			<as_parameter verified="1" type="const T&amp;" name="value"/>
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="uint get_length() const" name="get_length">
			<as_return type="uint" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="uint length() const" name="length">
			<as_return type="uint" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="uint size() const" name="size">
			<as_return type="uint" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void erase(uint)" name="erase">
			<as_parameter verified="1" type="uint" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void insert(uint, const T&amp;in)" name="insert">
			<as_parameter verified="1" type="uint" name=""/>
			<as_parameter verified="1" type="const T&amp;" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void insertAt(uint index, const T&amp;in value)" name="insertAt">
			<as_parameter verified="1" type="uint" name="index"/>
			<as_parameter verified="1" type="const T&amp;" name="value"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void insertLast(const T&amp;in value)" name="insertLast">
			<as_parameter verified="1" type="const T&amp;" name="value"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void pop_back()" name="pop_back">
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void push_back(const T&amp;in)" name="push_back">
			<as_parameter verified="1" type="const T&amp;" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void removeAt(uint index)" name="removeAt">
			<as_parameter verified="1" type="uint" name="index"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void removeLast()" name="removeLast">
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void reserve(uint length)" name="reserve">
			<as_parameter verified="1" type="uint" name="length"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void resize(uint length)" name="resize">
			<as_parameter verified="1" type="uint" name="length"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void reverse()" name="reverse">
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void set_length(uint)" name="set_length">
			<as_parameter verified="1" type="uint" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void sortAsc()" name="sortAsc">
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void sortAsc(uint startAt, uint count)" name="sortAsc">
			<as_parameter verified="1" type="uint" name="startAt"/>
			<as_parameter verified="1" type="uint" name="count"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void sortDesc()" name="sortDesc">
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void sortDesc(uint startAt, uint count)" name="sortDesc">
			<as_parameter verified="1" type="uint" name="startAt"/>
			<as_parameter verified="1" type="uint" name="count"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="as_reftype">
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_return type="string" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="boundingbox">
		<as_description>
			<as_line>A bounding box representes the range of an object in x,y and z</as_line>
		</as_description>
		<as_constructor verified="1" signature="boundingbox@ boundingbox()">
			<as_description>
				<as_line>constructor</as_line>
				<as_line>creates an empty/uninitialised bounding box</as_line>
			</as_description>
		</as_constructor>
		<as_member_function verified="1" signature="bool is_empty() const" name="is_empty">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double diagonal() const" name="diagonal">
			<as_return type="double" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double dx() const" name="dx">
			<as_description>
				<as_line>bounding box extent</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>bounding box extent in x-direction</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double dy() const" name="dy">
			<as_description>
				<as_line>bounding box extent</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>bounding box extent in y-direction</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double dz() const" name="dz">
			<as_description>
				<as_line>bounding box extent</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>bounding box extent in z-direction</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ center() const" name="center">
			<as_description>
				<as_line>center position</as_line>
			</as_description>
			<as_return type="pos3d@" verified="1">
				<as_description>
					<as_line>bounding box geometric center</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ p1() const" name="p1">
			<as_description>
				<as_line>low position</as_line>
			</as_description>
			<as_return type="pos3d@" verified="1">
				<as_description>
					<as_line>position containing minimum x,y,z</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ p2() const" name="p2">
			<as_description>
				<as_line>high position</as_line>
			</as_description>
			<as_return type="pos3d@" verified="1">
				<as_description>
					<as_line>position containing maximum x,y,z</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void enclose(pos3d@ p)" name="enclose">
			<as_description>
				<as_line>enclose a new position, this may extend the boundingbox</as_line>
			</as_description>
			<as_parameter verified="1" type="pos3d@" name="p">
				<as_description>
					<as_line>position to enclose</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="circle" base="shape2d">
		<as_description>
			<as_line>A 2d object defined by its radius. Centered on origin.</as_line>
		</as_description>
		<as_constructor verified="1" signature="circle@ circle(const pos2d@ p1, const pos2d@ p2, const pos2d@ p3)">
			<as_parameter verified="1" type="pos2d@" name="p1"/>
			<as_parameter verified="1" type="pos2d@" name="p2"/>
			<as_parameter verified="1" type="pos2d@" name="p3"/>
		</as_constructor>
		<as_constructor verified="1" signature="circle@ circle(double r)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="r">
				<as_description>
					<as_line>radius of circle</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double r() const" name="r">
			<as_description>
				<as_line>radius of circle</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>radius of circle</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double radius() const" name="radius">
			<as_description>
				<as_line>radius of circle</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>radius of circle</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAdd(shape2d@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAnd(shape2d@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opImplCast()" name="opImplCast">
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opSub(shape2d@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="cone" base="solid">
		<as_description>
			<as_line>A cone extends in the z-direction.</as_line>
			<as_line>By default the bottom is at origin</as_line>
		</as_description>
		<as_constructor verified="1" signature="cone@ cone(double h, double r1, double r2, bool center = false)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="h">
				<as_description>
					<as_line>height of cone</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="r1">
				<as_description>
					<as_line>bottom radius of cone</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="r2">
				<as_description>
					<as_line>top radius of cone</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="bool" name="center" default="false">
				<as_description>
					<as_line>true if cone is centered in z-direction</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double h() const" name="h">
			<as_description>
				<as_line>height of cone</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>height of cone</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double height() const" name="height">
			<as_description>
				<as_line>height of cone</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>height of cone</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double r1() const" name="r1">
			<as_description>
				<as_line>bottom radius</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>bottom radius</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double r2() const" name="r2">
			<as_description>
				<as_line>top radius</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>top radius</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double radius1() const" name="radius1">
			<as_description>
				<as_line>bottom radius</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>bottom radius</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double radius2() const" name="radius2">
			<as_description>
				<as_line>top radius</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>top radius</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="cube" base="solid">
		<as_constructor verified="1" signature="cube@ cube(double size, bool center = false)">
			<as_parameter verified="1" type="double" name="size"/>
			<as_parameter verified="1" type="bool" name="center" default="false"/>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double size() const" name="size">
			<as_return type="double" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_parameter verified="1" type="string" name="path"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_parameter verified="1" type="string" name="path"/>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="cuboid" base="solid">
		<as_description>
			<as_line>A cuboid is like a cube, but with separate dimensions in x,y and z.</as_line>
			<as_line>By default the cuboid touches the origin, and extends along positive x,y,z.</as_line>
		</as_description>
		<as_constructor verified="1" signature="cuboid@ cuboid(double dx, double dy, double dz, bool center = false)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="dx">
				<as_description>
					<as_line>length in x-drection</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="dy">
				<as_description>
					<as_line>length of y-direction</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="dz">
				<as_description>
					<as_line>length of z-direction</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="bool" name="center" default="false">
				<as_description>
					<as_line>true if cuboid is centered on origin</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double dx() const" name="dx">
			<as_description>
				<as_line>length in x-drection</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>length in x-drection</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double dy() const" name="dy">
			<as_description>
				<as_line>length in y-drection</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>length in x-drection</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double dz() const" name="dz">
			<as_description>
				<as_line>length in z-drection</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>length in x-drection</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="cylinder" base="solid">
		<as_description>
			<as_line>A cylinder is defined by height and radius.</as_line>
			<as_line>By default the cuboid extends from the origin, in z-direction.</as_line>
		</as_description>
		<as_constructor verified="1" signature="cylinder@ cylinder(double h, double r, bool center = false)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="h">
				<as_description>
					<as_line>height of cylinder</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="r">
				<as_description>
					<as_line>radius of cylinder</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="bool" name="center" default="false">
				<as_description>
					<as_line>true if cylinder is centered on origin in z-direction</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double h() const" name="h">
			<as_description>
				<as_line>Height of cylnder</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>height of cylnder</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double height() const" name="height">
			<as_description>
				<as_line>Height of cylnder</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>height of cylnder</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double r() const" name="r">
			<as_description>
				<as_line>Radius of cylnder</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>radius of cylnder</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double radius() const" name="radius">
			<as_description>
				<as_line>Radius of cylnder</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>radius of cylnder</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="dictionary">
		<as_constructor verified="1" signature="dictionary@ dictionary()"/>
		<as_member_function verified="1" signature="bool delete(const string&amp;in)" name="delete">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool empty() const" name="empty">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool exists(const string&amp;in) const" name="exists">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool get(const string&amp;in, ?&amp;out) const" name="get">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool get(const string&amp;in, double&amp;out) const" name="get">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_parameter verified="1" type="double" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool get(const string&amp;in, int64&amp;out) const" name="get">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_parameter verified="1" type="int64" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool isEmpty() const" name="isEmpty">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="const dictionaryValue&amp; opIndex(const string&amp;in) const" name="opIndex">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_return type="const dictionaryValue&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="dictionary&amp; opAssign(const dictionary&amp;in)" name="opAssign">
			<as_parameter verified="1" type="const dictionary&amp;@" name=""/>
			<as_return type="dictionary&amp;@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="dictionaryValue&amp; opIndex(const string&amp;in)" name="opIndex">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_return type="dictionaryValue&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string[]@ getKeys() const" name="getKeys">
			<as_return type="array@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="uint getSize() const" name="getSize">
			<as_return type="uint" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="uint size() const" name="size">
			<as_return type="uint" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void clear()" name="clear">
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void deleteAll()" name="deleteAll">
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void erase(const string&amp;in)" name="erase">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void set(const string&amp;in, const ?&amp;in)" name="set">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void set(const string&amp;in, const double&amp;in)" name="set">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_parameter verified="1" type="double" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void set(const string&amp;in, const int64&amp;in)" name="set">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_parameter verified="1" type="int64" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="dictionaryValue">
		<as_member_function verified="1" signature="dictionaryValue&amp; opAssign(const ?&amp;in)" name="opAssign">
			<as_return type="dictionaryValue&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="dictionaryValue&amp; opAssign(const dictionaryValue&amp;in)" name="opAssign">
			<as_parameter verified="1" type="const dictionaryValue&amp;" name=""/>
			<as_return type="dictionaryValue&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="dictionaryValue&amp; opAssign(double)" name="opAssign">
			<as_parameter verified="1" type="double" name=""/>
			<as_return type="dictionaryValue&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="dictionaryValue&amp; opAssign(int64)" name="opAssign">
			<as_parameter verified="1" type="int64" name=""/>
			<as_return type="dictionaryValue&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="dictionaryValue&amp; opHndlAssign(const ?&amp;in)" name="opHndlAssign">
			<as_return type="dictionaryValue&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double opConv()" name="opConv">
			<as_return type="double" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int64 opConv()" name="opConv">
			<as_return type="int64" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void opCast(?&amp;out)" name="opCast">
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void opConv(?&amp;out)" name="opConv">
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="difference2d" base="shape2d">
		<as_description>
			<as_line>difference2d is a 2-dimensional boolean operation. It can be invoked either</as_line>
			<as_line>explicitly or using subtraction operator:</as_line>
			<as_line>explicit: shape2d@ object = difference2d(circle(100),circle(50));</as_line>
			<as_line>using subtraction operator: shape2d@ object = circle(100) - circle(50);</as_line>
		</as_description>
		<as_constructor verified="1" signature="difference2d@ difference2d(shape2d@ incl, shape2d@ excl)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="incl">
				<as_description>
					<as_line>object to be included</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="excl">
				<as_description>
					<as_line>object to be excluded (subtracted)</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAdd(shape2d@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAnd(shape2d@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opImplCast()" name="opImplCast">
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opSub(shape2d@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="difference3d" base="solid">
		<as_description>
			<as_line>difference3d is a 3-dimensional boolean operation. It can be invoked either</as_line>
			<as_line>explicitly or using subtraction operator:</as_line>
			<as_line>explicit: solid@ object = difference3d(sphere(100),sphere(50));</as_line>
			<as_line>using subtraction operator: solid@ object = sphere(100) - sphere(50);</as_line>
		</as_description>
		<as_constructor verified="1" signature="difference3d@ difference3d(solid@ incl, solid@ excl)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="incl">
				<as_description>
					<as_line>objects to be included</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="excl">
				<as_description>
					<as_line>objects to be excluded (subtracted)</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="fill2d" base="shape2d">
		<as_description>
			<as_line>fill2d is a 2-dimensional boolean operation that removes internal holes</as_line>
			<as_line>in in 2d shapes, but leaves a possibly concave outer contour intact.</as_line>
			<as_line>fill2d can be invoked either on a single shape2d or an array.</as_line>
		</as_description>
		<as_constructor verified="1" signature="fill2d@ fill2d(const shape2d@ s1)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="s1">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="fill2d@ fill2d(shape2d@[]@ arr)">
			<as_parameter verified="1" type="array@" name="arr"/>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAdd(shape2d@ b)" name="opAdd">
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAnd(shape2d@ b)" name="opAnd">
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opImplCast()" name="opImplCast">
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opSub(shape2d@ b)" name="opSub">
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_parameter verified="1" type="string" name="path"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_parameter verified="1" type="string" name="path"/>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="hmatrix" base="tmatrix">
		<as_description>
			<as_line>hmatrix is a transformation expressed as homogenous transformation matrix.</as_line>
		</as_description>
		<as_constructor verified="1" signature="hmatrix@ hmatrix(const vec3d@ xvec, const vec3d@ yvec, const pos3d@ pos = pos3d ( 0 , 0 , 0 ))">
			<as_parameter verified="1" type="vec3d@" name="xvec"/>
			<as_parameter verified="1" type="vec3d@" name="yvec"/>
			<as_parameter verified="1" type="pos3d@" name="pos" default="pos3d ( 0 , 0 , 0 )"/>
		</as_constructor>
		<as_constructor verified="1" signature="hmatrix@ hmatrix(const vec3d@ xvec, const vec3d@ yvec, const vec3d@ zvec, const pos3d@ pos = pos3d ( 0 , 0 , 0 ))">
			<as_description>
				<as_line>constructor, 4 column values</as_line>
			</as_description>
			<as_parameter verified="1" type="vec3d@" name="xvec">
				<as_description>
					<as_line>1st matrix column</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="vec3d@" name="yvec">
				<as_description>
					<as_line>2nd matrix column</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="vec3d@" name="zvec">
				<as_description>
					<as_line>3rd matrix column</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="pos3d@" name="pos" default="pos3d ( 0 , 0 , 0 )">
				<as_description>
					<as_line>4rd matrix column</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opMul(pos2d@ obj)" name="opMul">
			<as_parameter verified="1" type="pos2d@" name="obj"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opMul(pos3d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a point: pos3d@ p = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="pos3d@" name="obj">
				<as_description>
					<as_line>position to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="pos3d@" verified="1">
				<as_description>
					<as_line>transformed position</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ origin() const" name="origin">
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(shape2d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a 2d shape: shape2d@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(solid@ obj)" name="opMul">
			<as_description>
				<as_line>transform a solid: solid@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opImplCast()" name="opImplCast">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opMul(const tmatrix@ B)" name="opMul">
			<as_description>
				<as_line>matrix multiplication: A = T*B</as_line>
			</as_description>
			<as_parameter verified="1" type="tmatrix@" name="B">
				<as_description>
					<as_line>matrix to be post-multiplied with this matrix</as_line>
				</as_description>
			</as_parameter>
			<as_return type="tmatrix@" verified="1">
				<as_description>
					<as_line>resulting matrixt</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ xdir() const" name="xdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ ydir() const" name="ydir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ zdir() const" name="zdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void dump() const" name="dump">
			<as_description>
				<as_line>dump matrix to console</as_line>
			</as_description>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="hull2d" base="shape2d">
		<as_description>
			<as_line>hull2d is a 2-dimensional boolean operation. It encapsulates</as_line>
			<as_line>the input objects with a convex shape. It can for example be used</as_line>
			<as_line>to create a rectangle with rounded cornes using 4 circles.</as_line>
		</as_description>
		<as_constructor verified="1" signature="hull2d@ hull2d(const shape2d@ s1, const shape2d@ s2)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="s1">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s2">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="hull2d@ hull2d(const shape2d@ s1, const shape2d@ s2, const shape2d@ s3)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="s1">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s2">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s3">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="hull2d@ hull2d(const shape2d@ s1, const shape2d@ s2, const shape2d@ s3, const shape2d@ s4)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="s1">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s2">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s3">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s4">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="hull2d@ hull2d(const shape2d@ s1, const shape2d@ s2, const shape2d@ s3, const shape2d@ s4, const shape2d@ s5)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="s1">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s2">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s3">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s4">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s5">
				<as_description>
					<as_line>shape</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="hull2d@ hull2d(shape2d@[]@ arr)">
			<as_parameter verified="1" type="array@" name="arr"/>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAdd(shape2d@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAnd(shape2d@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opImplCast()" name="opImplCast">
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opSub(shape2d@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="hull3d" base="solid">
		<as_description>
			<as_line>hull3d is a 3-dimensional boolean operation. It encapsulates</as_line>
			<as_line>the input objects with a convex shape. It can for example be used</as_line>
			<as_line>to create a cuboid with rounded cornes using 8 spheres.</as_line>
		</as_description>
		<as_constructor verified="1" signature="hull3d@ hull3d(const solid@ s1, const solid@ s2)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="s1">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s2">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="hull3d@ hull3d(const solid@ s1, const solid@ s2, const solid@ s3)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="s1">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s2">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s3">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="hull3d@ hull3d(const solid@ s1, const solid@ s2, const solid@ s3, const solid@ s4)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="s1">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s2">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s3">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s4">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="hull3d@ hull3d(const solid@ s1, const solid@ s2, const solid@ s3, const solid@ s4, const solid@ s5)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="s1">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s2">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s3">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s4">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s5">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="hull3d@ hull3d(solid@[]@ arr)">
			<as_parameter verified="1" type="array@" name="arr"/>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="intersection2d" base="shape2d">
		<as_description>
			<as_line>intersection2d is a 2-dimensional boolean operation. It can be invoked either</as_line>
			<as_line>explicitly or using &amp; operator:</as_line>
			<as_line>explicit: shape2d@ object = intersection2d(circle(100),translate(75,0,0)*circle(50));</as_line>
			<as_line>using &amp; operator: shape2d@ object = circle(100) &amp; translate(75,0,0)*circle(50);</as_line>
		</as_description>
		<as_constructor verified="1" signature="intersection2d@ intersection2d(const shape2d@ s1, const shape2d@ s2)">
			<as_parameter verified="1" type="shape2d@" name="s1"/>
			<as_parameter verified="1" type="shape2d@" name="s2"/>
		</as_constructor>
		<as_constructor verified="1" signature="intersection2d@ intersection2d(const shape2d@ s1, const shape2d@ s2, const shape2d@ s3)">
			<as_parameter verified="1" type="shape2d@" name="s1"/>
			<as_parameter verified="1" type="shape2d@" name="s2"/>
			<as_parameter verified="1" type="shape2d@" name="s3"/>
		</as_constructor>
		<as_constructor verified="1" signature="intersection2d@ intersection2d(const shape2d@ s1, const shape2d@ s2, const shape2d@ s3, const shape2d@ s4)">
			<as_parameter verified="1" type="shape2d@" name="s1"/>
			<as_parameter verified="1" type="shape2d@" name="s2"/>
			<as_parameter verified="1" type="shape2d@" name="s3"/>
			<as_parameter verified="1" type="shape2d@" name="s4"/>
		</as_constructor>
		<as_constructor verified="1" signature="intersection2d@ intersection2d(const shape2d@ s1, const shape2d@ s2, const shape2d@ s3, const shape2d@ s4, const shape2d@ s5)">
			<as_parameter verified="1" type="shape2d@" name="s1"/>
			<as_parameter verified="1" type="shape2d@" name="s2"/>
			<as_parameter verified="1" type="shape2d@" name="s3"/>
			<as_parameter verified="1" type="shape2d@" name="s4"/>
			<as_parameter verified="1" type="shape2d@" name="s5"/>
		</as_constructor>
		<as_constructor verified="1" signature="intersection2d@ intersection2d(shape2d@[]@ arr)">
			<as_parameter verified="1" type="array@" name="arr"/>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAdd(shape2d@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAnd(shape2d@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opImplCast()" name="opImplCast">
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opSub(shape2d@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="intersection3d" base="solid">
		<as_description>
			<as_line>intersection3d is a 2-dimensional boolean operation. It can be invoked either</as_line>
			<as_line>explicitly or using &amp; operator:</as_line>
			<as_line>explicit: solid@ object = intersection3d(sphere(100),translate(75,0,0)*sphere(50));</as_line>
			<as_line>using &amp; operator: solid@ object = sphere(100) &amp; translate(75,0,0)*sphere(50);</as_line>
		</as_description>
		<as_constructor verified="1" signature="intersection3d@ intersection3d(const solid@ s1, const solid@ s2)">
			<as_parameter verified="1" type="solid@" name="s1"/>
			<as_parameter verified="1" type="solid@" name="s2"/>
		</as_constructor>
		<as_constructor verified="1" signature="intersection3d@ intersection3d(const solid@ s1, const solid@ s2, const solid@ s3)">
			<as_parameter verified="1" type="solid@" name="s1"/>
			<as_parameter verified="1" type="solid@" name="s2"/>
			<as_parameter verified="1" type="solid@" name="s3"/>
		</as_constructor>
		<as_constructor verified="1" signature="intersection3d@ intersection3d(const solid@ s1, const solid@ s2, const solid@ s3, const solid@ s4)">
			<as_parameter verified="1" type="solid@" name="s1"/>
			<as_parameter verified="1" type="solid@" name="s2"/>
			<as_parameter verified="1" type="solid@" name="s3"/>
			<as_parameter verified="1" type="solid@" name="s4"/>
		</as_constructor>
		<as_constructor verified="1" signature="intersection3d@ intersection3d(const solid@ s1, const solid@ s2, const solid@ s3, const solid@ s4, const solid@ s5)">
			<as_parameter verified="1" type="solid@" name="s1"/>
			<as_parameter verified="1" type="solid@" name="s2"/>
			<as_parameter verified="1" type="solid@" name="s3"/>
			<as_parameter verified="1" type="solid@" name="s4"/>
			<as_parameter verified="1" type="solid@" name="s5"/>
		</as_constructor>
		<as_constructor verified="1" signature="intersection3d@ intersection3d(solid@[]@ arr)">
			<as_parameter verified="1" type="array@" name="arr"/>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="line2d">
		<as_constructor verified="1" signature="line2d@ line2d(const pos2d@ p1, const pos2d@ p2)">
			<as_parameter verified="1" type="pos2d@" name="p1"/>
			<as_parameter verified="1" type="pos2d@" name="p2"/>
		</as_constructor>
		<as_member_function verified="1" signature="double length() const" name="length">
			<as_return type="double" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double project(pos2d@ point) const" name="project">
			<as_parameter verified="1" type="pos2d@" name="point"/>
			<as_return type="double" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ end1() const" name="end1">
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ end2() const" name="end2">
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ interpolate(double par) const" name="interpolate">
			<as_parameter verified="1" type="double" name="par"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_return type="string" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="line3d">
		<as_constructor verified="1" signature="line3d@ line3d(const pos3d@ p1, const pos3d@ p2)">
			<as_parameter verified="1" type="pos3d@" name="p1"/>
			<as_parameter verified="1" type="pos3d@" name="p2"/>
		</as_constructor>
		<as_member_function verified="1" signature="double length() const" name="length">
			<as_return type="double" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double project(pos3d@ point) const" name="project">
			<as_parameter verified="1" type="pos3d@" name="point"/>
			<as_return type="double" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ end1() const" name="end1">
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ end2() const" name="end2">
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ interpolate(double par) const" name="interpolate">
			<as_parameter verified="1" type="double" name="par"/>
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_return type="string" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="linear_extrude" base="solid">
		<as_description>
			<as_line>linear_extrude extrudes a 2d shape in z-direction, creating a solid.</as_line>
		</as_description>
		<as_constructor verified="1" signature="linear_extrude@ linear_extrude(const shape2d@ shape, double height)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="shape">
				<as_description>
					<as_line>2d profile to be extruded</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="height">
				<as_description>
					<as_line>distance in z direction to extrude</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double height() const" name="height">
			<as_description>
				<as_line>extrusion height</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>extrusion height</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="locsys3d">
		<as_description>
			<as_line>a locsys3d represents local coordinate system directions.</as_line>
		</as_description>
		<as_constructor verified="1" signature="locsys3d@ locsys3d(const vec3d@ xvec, const vec3d@ zvec)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="vec3d@" name="xvec">
				<as_description>
					<as_line>local x-direction vector</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="vec3d@" name="zvec">
				<as_description>
					<as_line>local z-direction vector</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ x() const" name="x">
			<as_description>
				<as_line>local x-direction vector</as_line>
			</as_description>
			<as_return type="vec3d@" verified="1">
				<as_description>
					<as_line>local x-direction vector</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ y() const" name="y">
			<as_description>
				<as_line>local y-direction vector</as_line>
			</as_description>
			<as_return type="vec3d@" verified="1">
				<as_description>
					<as_line>local y-direction vector</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ z() const" name="z">
			<as_description>
				<as_line>local z-direction vector</as_line>
			</as_description>
			<as_return type="vec3d@" verified="1">
				<as_description>
					<as_line>local z-direction vector</as_line>
				</as_description>
			</as_return>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="map">
		<as_constructor verified="1" signature="map&lt;T_key,T_value&gt;@ map(int&amp;in)">
			<as_parameter verified="1" type="int" name=""/>
		</as_constructor>
		<as_constructor verified="1" signature="map&lt;T_key,T_value&gt;@ map(int&amp;in, map&lt;T_key,T_value&gt;@)">
			<as_parameter verified="1" type="int" name=""/>
			<as_parameter verified="1" type="map@" name=""/>
		</as_constructor>
		<as_member_function verified="1" signature="T_value&amp; find(const T_key&amp;in)" name="find">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_return type="T_value&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="T_value&amp; find(const T_key&amp;in, bool&amp;out)" name="find">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_parameter verified="1" type="bool" name=""/>
			<as_return type="T_value&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool contains(const T_key&amp;in)" name="contains">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool empty()" name="empty">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool erase(const map_iterator&lt;T_key,T_value&gt;&amp;in)" name="erase">
			<as_parameter verified="1" type="const map_iterator&amp;" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="const T_value&amp; get_opIndex(const T_key&amp;in) const" name="get_opIndex">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_return type="const T_value&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int erase(const map_iterator&lt;T_key,T_value&gt;&amp;in, const map_iterator&lt;T_key,T_value&gt;&amp;in)" name="erase">
			<as_parameter verified="1" type="const map_iterator&amp;" name=""/>
			<as_parameter verified="1" type="const map_iterator&amp;" name=""/>
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int size()" name="size">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="map&lt;T_key,T_value&gt;&amp; opAssign(map&lt;T_key,T_value&gt;@)" name="opAssign">
			<as_parameter verified="1" type="map@" name=""/>
			<as_return type="map&amp;@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="map&lt;T_key,T_value&gt;&amp; swap(map&lt;T_key,T_value&gt;&amp;inout)" name="swap">
			<as_parameter verified="1" type="map&amp;@" name=""/>
			<as_return type="map&amp;@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="map_iterator&lt;T_key,T_value&gt; begin()" name="begin">
			<as_return type="map_iterator" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="map_iterator&lt;T_key,T_value&gt; end()" name="end">
			<as_return type="map_iterator" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="map_iterator&lt;T_key,T_value&gt; find_iterator(const T_key&amp;in)" name="find_iterator">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_return type="map_iterator" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void SetDirectcomp(bool)" name="SetDirectcomp">
			<as_parameter verified="1" type="bool" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void clear()" name="clear">
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void erase(const T_key&amp;in)" name="erase">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void insert(const T_key&amp;in, const T_value&amp;in)" name="insert">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_parameter verified="1" type="const T_value&amp;" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void set_opIndex(const T_key&amp;in, const T_value&amp;in)" name="set_opIndex">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_parameter verified="1" type="const T_value&amp;" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="map_iterator">
		<as_member_function verified="1" signature="T_value&amp; current_value()" name="current_value">
			<as_return type="T_value&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="T_value&amp; get_value()" name="get_value">
			<as_return type="T_value&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool IsEnd()" name="IsEnd">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool IsValid()" name="IsValid">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool next()" name="next">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool opEquals(const map_iterator&lt;T_key,T_value&gt;&amp;in)" name="opEquals">
			<as_parameter verified="1" type="const map_iterator&amp;" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool opPostInc()" name="opPostInc">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool opPreInc()" name="opPreInc">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="const T_key&amp; current_key()" name="current_key">
			<as_return type="const T_key&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="const T_key&amp; get_key()" name="get_key">
			<as_return type="const T_key&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="map_iterator&lt;T_key,T_value&gt;&amp; opAssign(const map_iterator&lt;T_key,T_value&gt;&amp;in)" name="opAssign">
			<as_parameter verified="1" type="const map_iterator&amp;" name=""/>
			<as_return type="map_iterator&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void set_value(const T_value&amp;in)" name="set_value">
			<as_parameter verified="1" type="const T_value&amp;" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="minkowski2d" base="shape2d">
		<as_description>
			<as_line>minkowski2d is a 2-dimensional boolean operation requiring exactly</as_line>
			<as_line>2 parameters, a and b. The first parameter (a) is generally the larger</as_line>
			<as_line>and can be concave or convex. The second parameter (b) is assumed smaller</as_line>
			<as_line>and convex (such as a circle). Typical use of the minkowski sum is to</as_line>
			<as_line>create an object with rounded corners.</as_line>
		</as_description>
		<as_constructor verified="1" signature="minkowski2d@ minkowski2d(const shape2d@ a, const shape2d@ b)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="a">
				<as_description>
					<as_line>convex/concave object to be modified</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="b">
				<as_description>
					<as_line>convex &apos;tool&apos; object</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_description>
				<as_line>return bounding box</as_line>
			</as_description>
			<as_return type="boundingbox@" verified="1">
				<as_description>
					<as_line>The bounding box of the minkowski sum</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAdd(shape2d@ b)" name="opAdd">
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAnd(shape2d@ b)" name="opAnd">
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opImplCast()" name="opImplCast">
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opSub(shape2d@ b)" name="opSub">
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_parameter verified="1" type="string" name="path"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_parameter verified="1" type="string" name="path"/>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="minkowski3d" base="solid">
		<as_description>
			<as_line>minkowski3d is a 3-dimensional boolean operation requiring exactly</as_line>
			<as_line>2 parameters, a and b. The first parameter (a) is generally the larger</as_line>
			<as_line>and can be concave or convex. The second parameter (b) is assumed smaller</as_line>
			<as_line>and convex (such as a circle). Typical use of the minkowski sum is to</as_line>
			<as_line>create an object with rounded edges.</as_line>
		</as_description>
		<as_constructor verified="1" signature="minkowski3d@ minkowski3d(const solid@ a, const solid@ b)">
			<as_parameter verified="1" type="solid@" name="a"/>
			<as_parameter verified="1" type="solid@" name="b"/>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_description>
				<as_line>return bounding box</as_line>
			</as_description>
			<as_return type="boundingbox@" verified="1">
				<as_description>
					<as_line>The bounding box of the minkowski sum</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_parameter verified="1" type="string" name="path"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_parameter verified="1" type="string" name="path"/>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="mirror" base="tmatrix">
		<as_description>
			<as_line>mirror is a transformation creating mirror images of 2d or 3d objects.</as_line>
		</as_description>
		<as_constructor verified="1" signature="mirror@ mirror(double dx, double dy, double dz)">
			<as_description>
				<as_line>constructor, mirror around origin</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="dx">
				<as_description>
					<as_line>x-component of mirror plane normal</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="dy">
				<as_description>
					<as_line>y-component of mirror plane normal</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="dz">
				<as_description>
					<as_line>z-component of mirror plane normal</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="mirror@ mirror(vec3d@ normal, pos3d@ point = pos3d ( 0 , 0 , 0 ))">
			<as_description>
				<as_line>constructor, mirror around given point</as_line>
			</as_description>
			<as_parameter verified="1" type="vec3d@" name="normal">
				<as_description>
					<as_line>mirror plane normal vector</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="pos3d@" name="point" default="pos3d ( 0 , 0 , 0 )">
				<as_description>
					<as_line>point in mirror plane</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="double dx() const" name="dx">
			<as_description>
				<as_line>mirror transform normal vector, x-component</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>normal vector, x-component</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double dy() const" name="dy">
			<as_description>
				<as_line>mirror transform normal vector, y-component</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>normal vector, y-component</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double dz() const" name="dz">
			<as_description>
				<as_line>mirror transform normal vector, z-component</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>normal vector,z-component</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opMul(pos2d@ obj)" name="opMul">
			<as_parameter verified="1" type="pos2d@" name="obj"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opMul(pos3d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a point: pos3d@ p = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="pos3d@" name="obj">
				<as_description>
					<as_line>position to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="pos3d@" verified="1">
				<as_description>
					<as_line>transformed position</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ origin() const" name="origin">
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(shape2d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a 2d shape: shape2d@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(solid@ obj)" name="opMul">
			<as_description>
				<as_line>transform a solid: solid@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opImplCast()" name="opImplCast">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opMul(const tmatrix@ B)" name="opMul">
			<as_description>
				<as_line>matrix multiplication: A = T*B</as_line>
			</as_description>
			<as_parameter verified="1" type="tmatrix@" name="B">
				<as_description>
					<as_line>matrix to be post-multiplied with this matrix</as_line>
				</as_description>
			</as_parameter>
			<as_return type="tmatrix@" verified="1">
				<as_description>
					<as_line>resulting matrixt</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ xdir() const" name="xdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ ydir() const" name="ydir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ zdir() const" name="zdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void dump() const" name="dump">
			<as_description>
				<as_line>dump matrix to console</as_line>
			</as_description>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="offset2d" base="shape2d">
		<as_description>
			<as_line>offset2d is a special 2d operation used for inflating or shrinking a 2d shape,</as_line>
			<as_line>optionally creating rounded corners and chamfers.</as_line>
		</as_description>
		<as_constructor verified="1" signature="offset2d@ offset2d(const shape2d@ profile, double r = 0x7fc00000, double delta = 0x7fc00000, bool chamfer = false)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="profile">
				<as_description>
					<as_line>2d profile to be offset</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="r" default="0x7fc00000">
				<as_description>
					<as_line>radius if rounded offset required (cannot be combined with delta)</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="delta" default="0x7fc00000">
				<as_description>
					<as_line>straight offset if shart corners required (cannot be combined with r)</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="bool" name="chamfer" default="false">
				<as_description>
					<as_line>true if sharp corners to be chamfered (relevant with delta only)</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="offset2d@ offset2d(shape2d@[]@ arr, double r = 0x7fc00000, double delta = 0x7fc00000, bool chamfer = false)">
			<as_parameter verified="1" type="array@" name="arr"/>
			<as_parameter verified="1" type="double" name="r" default="0x7fc00000"/>
			<as_parameter verified="1" type="double" name="delta" default="0x7fc00000"/>
			<as_parameter verified="1" type="bool" name="chamfer" default="false"/>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAdd(shape2d@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAnd(shape2d@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opImplCast()" name="opImplCast">
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opSub(shape2d@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="pface">
		<as_description>
			<as_line>pface represents a single face of a polyhedron. It contains integer indices</as_line>
			<as_line>referring to the polyhedron vertices. When viewed from outside the polyhedron,</as_line>
			<as_line>a pface should list its vertices in CCW sequence.</as_line>
		</as_description>
		<as_constructor verified="1" signature="pface@ pface(uint iv1, uint iv2, uint iv3)">
			<as_description>
				<as_line>polyhedron face constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="uint" name="iv1">
				<as_description>
					<as_line>polyhedron vertex index</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="uint" name="iv2">
				<as_description>
					<as_line>polyhedron vertex index</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="uint" name="iv3">
				<as_description>
					<as_line>polyhedron vertex index</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="pface@ pface(uint iv1, uint iv2, uint iv3, uint iv4)">
			<as_description>
				<as_line>polyhedron face constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="uint" name="iv1">
				<as_description>
					<as_line>polyhedron vertex index</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="uint" name="iv2">
				<as_description>
					<as_line>polyhedron vertex index</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="uint" name="iv3">
				<as_description>
					<as_line>polyhedron vertex index</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="uint" name="iv4">
				<as_description>
					<as_line>polyhedron vertex index</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="uint nvert() const" name="nvert">
			<as_description>
				<as_line>number of vertices in face</as_line>
			</as_description>
			<as_return type="uint" verified="1">
				<as_description>
					<as_line>number of vertices in face</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="uint vindex(uint iv) const" name="vindex">
			<as_description>
				<as_line>polyhedron vertex index for face index</as_line>
			</as_description>
			<as_parameter verified="1" type="uint" name="iv">
				<as_description>
					<as_line>face index</as_line>
				</as_description>
			</as_parameter>
			<as_return type="uint" verified="1">
				<as_description>
					<as_line>polyhedron face index</as_line>
				</as_description>
			</as_return>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="polygon" base="shape2d">
		<as_description>
			<as_line>a polygon is a 2d object. It is defined by vertex positions listed in CCW sequence.</as_line>
		</as_description>
		<as_constructor verified="1" signature="polygon@ polygon(const pos2d@ p1, const pos2d@ p2, const pos2d@ p3)">
			<as_description>
				<as_line>constructor (triangle), points must be given in CCW order</as_line>
			</as_description>
			<as_parameter verified="1" type="pos2d@" name="p1">
				<as_description>
					<as_line>position</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="pos2d@" name="p2">
				<as_description>
					<as_line>position</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="pos2d@" name="p3">
				<as_description>
					<as_line>position</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="polygon@ polygon(const pos2d@ p1, const pos2d@ p2, const pos2d@ p3, const pos2d@ p4)">
			<as_description>
				<as_line>constructor (quadrilateral), points must be given in CCW order</as_line>
			</as_description>
			<as_parameter verified="1" type="pos2d@" name="p1">
				<as_description>
					<as_line>position</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="pos2d@" name="p2">
				<as_description>
					<as_line>position</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="pos2d@" name="p3">
				<as_description>
					<as_line>position</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="pos2d@" name="p4">
				<as_description>
					<as_line>position</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="polygon@ polygon(const pos2d@ p1, const pos2d@ p2, const pos2d@ p3, const pos2d@ p4, const pos2d@ p5)">
			<as_description>
				<as_line>constructor (pentagon), points must be given in CCW order</as_line>
			</as_description>
			<as_parameter verified="1" type="pos2d@" name="p1">
				<as_description>
					<as_line>position</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="pos2d@" name="p2">
				<as_description>
					<as_line>position</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="pos2d@" name="p3">
				<as_description>
					<as_line>position</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="pos2d@" name="p4">
				<as_description>
					<as_line>position</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="pos2d@" name="p5">
				<as_description>
					<as_line>position</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="polygon@ polygon(const spline2d@ spline, uint nseg = 30)">
			<as_description>
				<as_line>constructor (spline), points must be given in CCW order</as_line>
			</as_description>
			<as_parameter verified="1" type="spline2d@" name="spline">
				<as_description>
					<as_line>2d spline curve defining polygon profile</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="uint" name="nseg" default="30">
				<as_description>
					<as_line>number of straight segments for spline</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="polygon@ polygon(double r, uint np)">
			<as_parameter verified="1" type="double" name="r"/>
			<as_parameter verified="1" type="uint" name="np"/>
		</as_constructor>
		<as_constructor verified="1" signature="polygon@ polygon(pos2d@[]@ points, bool check = true)">
			<as_parameter verified="1" type="array@" name="points"/>
			<as_parameter verified="1" type="bool" name="check" default="true"/>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double area() const" name="area">
			<as_description>
				<as_line>Polygon area</as_line>
				<as_line>return computed area of polygon</as_line>
			</as_description>
			<as_return type="double" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double signed_area() const" name="signed_area">
			<as_description>
				<as_line>Signed polygon area, return negative area for polygons oriented CW</as_line>
				<as_line>return signed computed area of polygon</as_line>
			</as_description>
			<as_return type="double" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ vertex(uint iv) const" name="vertex">
			<as_parameter verified="1" type="uint" name="iv"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAdd(shape2d@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAnd(shape2d@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opImplCast()" name="opImplCast">
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opSub(shape2d@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="uint size() const" name="size">
			<as_description>
				<as_line>number of polygon points</as_line>
			</as_description>
			<as_return type="uint" verified="1">
				<as_description>
					<as_line>number of polygon points</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="polyhedron" base="solid">
		<as_description>
			<as_line>a polyhedron is a general 3d object, defined by its vertices and polyhedron faces.</as_line>
			<as_line>It is useful in many contexts. It can be constructed directly or by reference to an input file.</as_line>
		</as_description>
		<as_constructor verified="1" signature="polyhedron@ polyhedron(pos3d@[]@ points)">
			<as_parameter verified="1" type="array@" name="points"/>
		</as_constructor>
		<as_constructor verified="1" signature="polyhedron@ polyhedron(pos3d@[]@ points, pface@[]@ faces)">
			<as_parameter verified="1" type="array@" name="points"/>
			<as_parameter verified="1" type="array@" name="faces"/>
		</as_constructor>
		<as_constructor verified="1" signature="polyhedron@ polyhedron(string file, int id = - 1)">
			<as_parameter verified="1" type="string" name="file"/>
			<as_parameter verified="1" type="int" name="id" default="- 1"/>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double face_area(uint iface) const" name="face_area">
			<as_description>
				<as_line>polyhedron face area</as_line>
			</as_description>
			<as_parameter verified="1" type="uint" name="iface">
				<as_description>
					<as_line>index of polyhedron face</as_line>
				</as_description>
			</as_parameter>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>computed area of polyhedron face</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double volume() const" name="volume">
			<as_description>
				<as_line>polyhedron volume</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>computed volume of polyhedron</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pface@ face(uint iface) const" name="face">
			<as_description>
				<as_line>polyhedron face</as_line>
			</as_description>
			<as_parameter verified="1" type="uint" name="iface">
				<as_description>
					<as_line>index of polyhedron face</as_line>
				</as_description>
			</as_parameter>
			<as_return type="pface@" verified="1">
				<as_description>
					<as_line>polyhedron face</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ vertex(uint iv) const" name="vertex">
			<as_description>
				<as_line>polyhedron vertex</as_line>
			</as_description>
			<as_parameter verified="1" type="uint" name="iv">
				<as_description>
					<as_line>index of polyhedron vertex</as_line>
				</as_description>
			</as_parameter>
			<as_return type="pos3d@" verified="1">
				<as_description>
					<as_line>polyhedron vertex position</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b">
				<as_description>
					<as_line>object to union with this object</as_line>
				</as_description>
			</as_parameter>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b">
				<as_description>
					<as_line>object to intersect with this object</as_line>
				</as_description>
			</as_parameter>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b">
				<as_description>
					<as_line>object to subtract from this object</as_line>
				</as_description>
			</as_parameter>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="uint nface() const" name="nface">
			<as_description>
				<as_line>Number of faces</as_line>
			</as_description>
			<as_return type="uint" verified="1">
				<as_description>
					<as_line>number of faces in polyhedron</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="uint nvert() const" name="nvert">
			<as_description>
				<as_line>Number of vertices</as_line>
			</as_description>
			<as_return type="uint" verified="1">
				<as_description>
					<as_line>number of vertices in polyhedron</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="void flip_face(uint iface)" name="flip_face">
			<as_description>
				<as_line>Flip polyhedron face normal</as_line>
			</as_description>
			<as_parameter verified="1" type="uint" name="iface">
				<as_description>
					<as_line>index of polyhedron face</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void flip_faces()" name="flip_faces">
			<as_description>
				<as_line>Flip all polyhedron face normals</as_line>
			</as_description>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void set_vertex(uint iv, pos3d@ pos)" name="set_vertex">
			<as_description>
				<as_line>Set vertex position</as_line>
			</as_description>
			<as_parameter verified="1" type="uint" name="iv">
				<as_description>
					<as_line>index of polyhedron vertex</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="pos3d@" name="pos">
				<as_description>
					<as_line>new position of vertex</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void verify() const" name="verify">
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="pos2d">
		<as_description>
			<as_line>a pos2d is a position in 2d space. It is used with 2d objects.</as_line>
		</as_description>
		<as_constructor verified="1" signature="pos2d@ pos2d(const pos2d@ other)">
			<as_parameter verified="1" type="pos2d@" name="other"/>
		</as_constructor>
		<as_constructor verified="1" signature="pos2d@ pos2d(double x, double y)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="x">
				<as_description>
					<as_line>coordinate</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="y">
				<as_description>
					<as_line>coordinate</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="double dist(const pos2d@ pos) const" name="dist">
			<as_description>
				<as_line>distance from other position</as_line>
			</as_description>
			<as_parameter verified="1" type="pos2d@" name="pos">
				<as_description>
					<as_line>other position</as_line>
				</as_description>
			</as_parameter>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>distance from pos</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double x() const" name="x">
			<as_description>
				<as_line>x coordinate</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>x coordinate</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double y() const" name="y">
			<as_description>
				<as_line>y coordinate</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>y coordinate</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opAdd(pos2d@ p1)" name="opAdd">
			<as_parameter verified="1" type="pos2d@" name="p1"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opAdd(vec2d@ v1)" name="opAdd">
			<as_parameter verified="1" type="vec2d@" name="v1"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opAdd_r(vec2d@ v1)" name="opAdd_r">
			<as_parameter verified="1" type="vec2d@" name="v1"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opMul(double f1)" name="opMul">
			<as_parameter verified="1" type="double" name="f1"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opMul_r(double f1)" name="opMul_r">
			<as_parameter verified="1" type="double" name="f1"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opSub(vec2d@ v1)" name="opSub">
			<as_parameter verified="1" type="vec2d@" name="v1"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="pos3d">
		<as_description>
			<as_line>a pos3d is a position in 3d space. It is used with 3d objects.</as_line>
		</as_description>
		<as_constructor verified="1" signature="pos3d@ pos3d(const pos3d@ other)">
			<as_parameter verified="1" type="pos3d@" name="other"/>
		</as_constructor>
		<as_constructor verified="1" signature="pos3d@ pos3d(double x, double y, double z)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="x">
				<as_description>
					<as_line>coordinate</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="y">
				<as_description>
					<as_line>coordinate</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="z">
				<as_description>
					<as_line>coordinate</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="double dist(const pos3d@ pos) const" name="dist">
			<as_description>
				<as_line>distance from other position</as_line>
			</as_description>
			<as_parameter verified="1" type="pos3d@" name="pos">
				<as_description>
					<as_line>other position</as_line>
				</as_description>
			</as_parameter>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>distance from pos</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double x() const" name="x">
			<as_description>
				<as_line>x coordinate</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>x coordinate</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double y() const" name="y">
			<as_description>
				<as_line>y coordinate</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>y coordinate</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double z() const" name="z">
			<as_description>
				<as_line>z coordinate</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>z coordinate</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opAdd(pos3d@ p1)" name="opAdd">
			<as_parameter verified="1" type="pos3d@" name="p1"/>
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opAdd(vec3d@ v1)" name="opAdd">
			<as_parameter verified="1" type="vec3d@" name="v1"/>
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opAdd_r(vec3d@ v1)" name="opAdd_r">
			<as_parameter verified="1" type="vec3d@" name="v1"/>
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opMul(double f1)" name="opMul">
			<as_parameter verified="1" type="double" name="f1"/>
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opMul_r(double f1)" name="opMul_r">
			<as_parameter verified="1" type="double" name="f1"/>
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opSub(vec3d@ v1)" name="opSub">
			<as_parameter verified="1" type="vec3d@" name="v1"/>
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="rectangle" base="shape2d">
		<as_description>
			<as_line>a rectangle is a 2d object defined by its extent in x and y. By default it touches the</as_line>
			<as_line>origin and extends along positive x and y.</as_line>
		</as_description>
		<as_constructor verified="1" signature="rectangle@ rectangle(double dx, double dy, bool center = false)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="dx">
				<as_description>
					<as_line>extent in x direction</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="dy">
				<as_description>
					<as_line>extent in y direction</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="bool" name="center" default="false">
				<as_description>
					<as_line>true if rectangle should be centered on origin</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double dx() const" name="dx">
			<as_description>
				<as_line>extent in x direction</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>extent in x direction</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double dy() const" name="dy">
			<as_description>
				<as_line>extent in y direction</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>extent in y direction</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAdd(shape2d@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAnd(shape2d@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opImplCast()" name="opImplCast">
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opSub(shape2d@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="rotate_extrude" base="solid">
		<as_description>
			<as_line>rotate_extrude allows extruding a 2d shape along a circular path. A positive</as_line>
			<as_line>angle rotates the object around the y axis (CCW direction).</as_line>
			<as_line>solid@ object = rotate_extrude(translate(100,0)*circle(10),deg:60);</as_line>
		</as_description>
		<as_constructor verified="1" signature="rotate_extrude@ rotate_extrude(const shape2d@ shape, double deg, double pitch = 0.0)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="shape">
				<as_description>
					<as_line>2d profile shape to extrude</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="deg">
				<as_description>
					<as_line>rotation in degrees. Rotation is CCW around y axis.</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="pitch" default="0.0">
				<as_description>
					<as_line>distance to offset profile in y direction for each revolution</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double deg() const" name="deg">
			<as_description>
				<as_line>extrusion angle in degrees</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>extrusion angle in degrees</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double rad() const" name="rad">
			<as_description>
				<as_line>extrusion angle in radians</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>extrusion angle in radians</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="rotate_x" base="tmatrix">
		<as_description>
			<as_line>rotate_x is a transformation rotating around the x-axis. Positive angle according to right hand rule.</as_line>
		</as_description>
		<as_constructor verified="1" signature="rotate_x@ rotate_x(double deg = 0x7fc00000, double rad = 0x7fc00000)">
			<as_description>
				<as_line>constructor (rotate around x)</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="deg" default="0x7fc00000">
				<as_description>
					<as_line>rotation specified in degrees (cannot be combined with rad)</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="rad" default="0x7fc00000">
				<as_description>
					<as_line>rotation specified in radians (cannot be combined with deg)</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="double deg() const" name="deg">
			<as_description>
				<as_line>rotation angle in degrees</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>rotation angle in degrees</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double rad() const" name="rad">
			<as_description>
				<as_line>rotation angle in radians</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>rotation angle in radians</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opMul(pos2d@ obj)" name="opMul">
			<as_parameter verified="1" type="pos2d@" name="obj"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opMul(pos3d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a point: pos3d@ p = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="pos3d@" name="obj">
				<as_description>
					<as_line>position to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="pos3d@" verified="1">
				<as_description>
					<as_line>transformed position</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ origin() const" name="origin">
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(shape2d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a 2d shape: shape2d@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(solid@ obj)" name="opMul">
			<as_description>
				<as_line>transform a solid: solid@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opImplCast()" name="opImplCast">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opMul(const tmatrix@ B)" name="opMul">
			<as_description>
				<as_line>matrix multiplication: A = T*B</as_line>
			</as_description>
			<as_parameter verified="1" type="tmatrix@" name="B">
				<as_description>
					<as_line>matrix to be post-multiplied with this matrix</as_line>
				</as_description>
			</as_parameter>
			<as_return type="tmatrix@" verified="1">
				<as_description>
					<as_line>resulting matrixt</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ xdir() const" name="xdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ ydir() const" name="ydir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ zdir() const" name="zdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void dump() const" name="dump">
			<as_description>
				<as_line>dump matrix to console</as_line>
			</as_description>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="rotate_y" base="tmatrix">
		<as_description>
			<as_line>rotate_y is a transformation rotating around the y-axis. Positive angle according to right hand rule.</as_line>
		</as_description>
		<as_constructor verified="1" signature="rotate_y@ rotate_y(double deg = 0x7fc00000, double rad = 0x7fc00000)">
			<as_description>
				<as_line>constructor (rotate around y)</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="deg" default="0x7fc00000">
				<as_description>
					<as_line>rotation specified in degrees (cannot be combined with rad)</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="rad" default="0x7fc00000">
				<as_description>
					<as_line>rotation specified in radians (cannot be combined with deg)</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="double deg() const" name="deg">
			<as_description>
				<as_line>rotation angle in degrees</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>rotation angle in degrees</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double rad() const" name="rad">
			<as_description>
				<as_line>rotation angle in radians</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>rotation angle in radians</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opMul(pos2d@ obj)" name="opMul">
			<as_parameter verified="1" type="pos2d@" name="obj"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opMul(pos3d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a point: pos3d@ p = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="pos3d@" name="obj">
				<as_description>
					<as_line>position to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="pos3d@" verified="1">
				<as_description>
					<as_line>transformed position</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ origin() const" name="origin">
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(shape2d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a 2d shape: shape2d@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(solid@ obj)" name="opMul">
			<as_description>
				<as_line>transform a solid: solid@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opImplCast()" name="opImplCast">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opMul(const tmatrix@ B)" name="opMul">
			<as_description>
				<as_line>matrix multiplication: A = T*B</as_line>
			</as_description>
			<as_parameter verified="1" type="tmatrix@" name="B">
				<as_description>
					<as_line>matrix to be post-multiplied with this matrix</as_line>
				</as_description>
			</as_parameter>
			<as_return type="tmatrix@" verified="1">
				<as_description>
					<as_line>resulting matrixt</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ xdir() const" name="xdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ ydir() const" name="ydir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ zdir() const" name="zdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void dump() const" name="dump">
			<as_description>
				<as_line>dump matrix to console</as_line>
			</as_description>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="rotate_z" base="tmatrix">
		<as_description>
			<as_line>rotate_z is a transformation rotating around the z-axis. Positive angle according to right hand rule.</as_line>
		</as_description>
		<as_constructor verified="1" signature="rotate_z@ rotate_z(double deg = 0x7fc00000, double rad = 0x7fc00000)">
			<as_description>
				<as_line>constructor (rotate around z)</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="deg" default="0x7fc00000">
				<as_description>
					<as_line>rotation specified in degrees (cannot be combined with rad)</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="rad" default="0x7fc00000">
				<as_description>
					<as_line>rotation specified in radians (cannot be combined with deg)</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="double deg() const" name="deg">
			<as_description>
				<as_line>rotation angle in degrees</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>rotation angle in degrees</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double rad() const" name="rad">
			<as_description>
				<as_line>rotation angle in radians</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>rotation angle in radians</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opMul(pos2d@ obj)" name="opMul">
			<as_parameter verified="1" type="pos2d@" name="obj"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opMul(pos3d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a point: pos3d@ p = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="pos3d@" name="obj">
				<as_description>
					<as_line>position to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="pos3d@" verified="1">
				<as_description>
					<as_line>transformed position</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ origin() const" name="origin">
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(shape2d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a 2d shape: shape2d@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(solid@ obj)" name="opMul">
			<as_description>
				<as_line>transform a solid: solid@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opImplCast()" name="opImplCast">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opMul(const tmatrix@ B)" name="opMul">
			<as_description>
				<as_line>matrix multiplication: A = T*B</as_line>
			</as_description>
			<as_parameter verified="1" type="tmatrix@" name="B">
				<as_description>
					<as_line>matrix to be post-multiplied with this matrix</as_line>
				</as_description>
			</as_parameter>
			<as_return type="tmatrix@" verified="1">
				<as_description>
					<as_line>resulting matrixt</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ xdir() const" name="xdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ ydir() const" name="ydir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ zdir() const" name="zdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void dump() const" name="dump">
			<as_description>
				<as_line>dump matrix to console</as_line>
			</as_description>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="scale" base="tmatrix">
		<as_description>
			<as_line>scale is a transformation scaling an object, either uniformly or with different factors in different directions.</as_line>
		</as_description>
		<as_constructor verified="1" signature="scale@ scale(double s)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="s">
				<as_description>
					<as_line>scale factor in x,y and z</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="scale@ scale(double sx, double sy, double sz = 1.0)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="sx">
				<as_description>
					<as_line>scale factor in x</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="sy">
				<as_description>
					<as_line>scale factor in y</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="sz" default="1.0">
				<as_description>
					<as_line>scale factor in z</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="double sx() const" name="sx">
			<as_description>
				<as_line>scale factor in x direction</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>scale factor in x direction</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double sy() const" name="sy">
			<as_description>
				<as_line>scale factor in y direction</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>scale factor in y direction</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double sz() const" name="sz">
			<as_description>
				<as_line>scale factor in z direction</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>scale factor in z direction</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opMul(pos2d@ obj)" name="opMul">
			<as_parameter verified="1" type="pos2d@" name="obj"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opMul(pos3d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a point: pos3d@ p = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="pos3d@" name="obj">
				<as_description>
					<as_line>position to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="pos3d@" verified="1">
				<as_description>
					<as_line>transformed position</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ origin() const" name="origin">
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(shape2d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a 2d shape: shape2d@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(solid@ obj)" name="opMul">
			<as_description>
				<as_line>transform a solid: solid@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opImplCast()" name="opImplCast">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opMul(const tmatrix@ B)" name="opMul">
			<as_description>
				<as_line>matrix multiplication: A = T*B</as_line>
			</as_description>
			<as_parameter verified="1" type="tmatrix@" name="B">
				<as_description>
					<as_line>matrix to be post-multiplied with this matrix</as_line>
				</as_description>
			</as_parameter>
			<as_return type="tmatrix@" verified="1">
				<as_description>
					<as_line>resulting matrixt</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ xdir() const" name="xdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ ydir() const" name="ydir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ zdir() const" name="zdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void dump() const" name="dump">
			<as_description>
				<as_line>dump matrix to console</as_line>
			</as_description>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="shape">
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="circle@ opCast()" name="opCast">
			<as_return type="circle@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="cone@ opCast()" name="opCast">
			<as_return type="cone@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="cube@ opCast()" name="opCast">
			<as_return type="cube@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="cuboid@ opCast()" name="opCast">
			<as_return type="cuboid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="cylinder@ opCast()" name="opCast">
			<as_return type="cylinder@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="difference2d@ opCast()" name="opCast">
			<as_return type="difference2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="difference3d@ opCast()" name="opCast">
			<as_return type="difference3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="fill2d@ opCast()" name="opCast">
			<as_return type="fill2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="hull2d@ opCast()" name="opCast">
			<as_return type="hull2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="hull3d@ opCast()" name="opCast">
			<as_return type="hull3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="intersection2d@ opCast()" name="opCast">
			<as_return type="intersection2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="intersection3d@ opCast()" name="opCast">
			<as_return type="intersection3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="linear_extrude@ opCast()" name="opCast">
			<as_return type="linear_extrude@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="minkowski2d@ opCast()" name="opCast">
			<as_return type="minkowski2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="minkowski3d@ opCast()" name="opCast">
			<as_return type="minkowski3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="offset2d@ opCast()" name="opCast">
			<as_return type="offset2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="polygon@ opCast()" name="opCast">
			<as_return type="polygon@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="polyhedron@ opCast()" name="opCast">
			<as_return type="polyhedron@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="rectangle@ opCast()" name="opCast">
			<as_return type="rectangle@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="rotate_extrude@ opCast()" name="opCast">
			<as_return type="rotate_extrude@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opCast()" name="opCast">
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opCast()" name="opCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="sphere@ opCast()" name="opCast">
			<as_return type="sphere@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="square@ opCast()" name="opCast">
			<as_return type="square@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="sweep@ opCast()" name="opCast">
			<as_return type="sweep@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="transform_extrude@ opCast()" name="opCast">
			<as_return type="transform_extrude@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="union2d@ opCast()" name="opCast">
			<as_return type="union2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="union3d@ opCast()" name="opCast">
			<as_return type="union3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_parameter verified="1" type="string" name="path"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_parameter verified="1" type="string" name="path"/>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="shape2d" base="shape">
		<as_description>
			<as_line>shape2d is an abstract base class for all 2d objects.</as_line>
		</as_description>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="circle@ opCast()" name="opCast">
			<as_return type="circle@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="difference2d@ opCast()" name="opCast">
			<as_return type="difference2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="fill2d@ opCast()" name="opCast">
			<as_return type="fill2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="hull2d@ opCast()" name="opCast">
			<as_return type="hull2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="intersection2d@ opCast()" name="opCast">
			<as_return type="intersection2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="minkowski2d@ opCast()" name="opCast">
			<as_return type="minkowski2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="offset2d@ opCast()" name="opCast">
			<as_return type="offset2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="polygon@ opCast()" name="opCast">
			<as_return type="polygon@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="rectangle@ opCast()" name="opCast">
			<as_return type="rectangle@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAdd(shape2d@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAnd(shape2d@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opSub(shape2d@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="square@ opCast()" name="opCast">
			<as_return type="square@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="union2d@ opCast()" name="opCast">
			<as_return type="union2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="solid" base="shape">
		<as_description>
			<as_line>solid is an abstract base class for all 3d objects.</as_line>
		</as_description>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="cone@ opCast()" name="opCast">
			<as_return type="cone@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="cube@ opCast()" name="opCast">
			<as_return type="cube@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="cuboid@ opCast()" name="opCast">
			<as_return type="cuboid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="cylinder@ opCast()" name="opCast">
			<as_return type="cylinder@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="difference3d@ opCast()" name="opCast">
			<as_return type="difference3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="hull3d@ opCast()" name="opCast">
			<as_return type="hull3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="intersection3d@ opCast()" name="opCast">
			<as_return type="intersection3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="linear_extrude@ opCast()" name="opCast">
			<as_return type="linear_extrude@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="minkowski3d@ opCast()" name="opCast">
			<as_return type="minkowski3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="polyhedron@ opCast()" name="opCast">
			<as_return type="polyhedron@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="rotate_extrude@ opCast()" name="opCast">
			<as_return type="rotate_extrude@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="sphere@ opCast()" name="opCast">
			<as_return type="sphere@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="sweep@ opCast()" name="opCast">
			<as_return type="sweep@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="transform_extrude@ opCast()" name="opCast">
			<as_return type="transform_extrude@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="union3d@ opCast()" name="opCast">
			<as_return type="union3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="sphere" base="solid">
		<as_description>
			<as_line>a sphere is a 3d object defined by its radius.</as_line>
		</as_description>
		<as_constructor verified="1" signature="sphere@ sphere(double r)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="r">
				<as_description>
					<as_line>radius</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double r() const" name="r">
			<as_description>
				<as_line>sphere radius</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>radius</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double radius() const" name="radius">
			<as_description>
				<as_line>sphere radius</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>radius</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="spline2d">
		<as_description>
			<as_line>a spline2d is a 2d cubic spline curve.</as_line>
		</as_description>
		<as_constructor verified="1" signature="spline2d@ spline2d(pos2d@[]@ points)">
			<as_parameter verified="1" type="array@" name="points"/>
		</as_constructor>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="spline3d">
		<as_description>
			<as_line>a spline3d is a 3d cubic spline curve.</as_line>
		</as_description>
		<as_constructor verified="1" signature="spline3d@ spline3d(pos3d@[]@ points)">
			<as_parameter verified="1" type="array@" name="points"/>
		</as_constructor>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="spline_path">
		<as_description>
			<as_line>a spline_path defines a cubic spline sweep path.</as_line>
		</as_description>
		<as_constructor verified="1" signature="spline_path@ spline_path(pos3d@[]@ p, vec3d@[]@ v)">
			<as_parameter verified="1" type="array@" name="p"/>
			<as_parameter verified="1" type="array@" name="v"/>
		</as_constructor>
		<as_constructor verified="1" signature="spline_path@ spline_path(pos3d@[]@ p, vec3d@ v)">
			<as_parameter verified="1" type="array@" name="p"/>
			<as_parameter verified="1" type="vec3d@" name="v"/>
		</as_constructor>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="square" base="shape2d">
		<as_description>
			<as_line>a square is a 2d quadrilateral with equal dimensions in x and y.</as_line>
			<as_line>By default it touches the origin and extend along positive x and y.</as_line>
		</as_description>
		<as_constructor verified="1" signature="square@ square(double size, bool center = false)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="size">
				<as_description>
					<as_line>extent in x and y</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="bool" name="center" default="false">
				<as_description>
					<as_line>true if square to be centered on origon</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="double size() const" name="size">
			<as_description>
				<as_line>size of square</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>size of square</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAdd(shape2d@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAnd(shape2d@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opImplCast()" name="opImplCast">
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opSub(shape2d@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="string">
		<as_member_function verified="1" signature="bool empty() const" name="empty">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool isEmpty() const" name="isEmpty">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool opEquals(const string&amp;in) const" name="opEquals">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="const uint8&amp; opIndex(uint) const" name="opIndex">
			<as_parameter verified="1" type="uint" name=""/>
			<as_return type="uint8" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int find(const string&amp;in, uint start = 0) const" name="find">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_parameter verified="1" type="uint" name="start" default="0"/>
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int findFirst(const string&amp;in, uint start = 0) const" name="findFirst">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_parameter verified="1" type="uint" name="start" default="0"/>
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int findLast(const string&amp;in, int start = - 1) const" name="findLast">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_parameter verified="1" type="int" name="start" default="- 1"/>
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int opCmp(const string&amp;in) const" name="opCmp">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int rfind(const string&amp;in, int start = - 1) const" name="rfind">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_parameter verified="1" type="int" name="start" default="- 1"/>
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string&amp; opAddAssign(bool)" name="opAddAssign">
			<as_parameter verified="1" type="bool" name=""/>
			<as_return type="string&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string&amp; opAddAssign(const string&amp;in)" name="opAddAssign">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_return type="string&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string&amp; opAddAssign(double)" name="opAddAssign">
			<as_parameter verified="1" type="double" name=""/>
			<as_return type="string&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string&amp; opAddAssign(float)" name="opAddAssign">
			<as_parameter verified="1" type="float" name=""/>
			<as_return type="string&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string&amp; opAddAssign(int64)" name="opAddAssign">
			<as_parameter verified="1" type="int64" name=""/>
			<as_return type="string&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string&amp; opAddAssign(uint64)" name="opAddAssign">
			<as_parameter verified="1" type="uint64" name=""/>
			<as_return type="string&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string&amp; opAssign(bool)" name="opAssign">
			<as_parameter verified="1" type="bool" name=""/>
			<as_return type="string&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string&amp; opAssign(const string&amp;in)" name="opAssign">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_return type="string&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string&amp; opAssign(double)" name="opAssign">
			<as_parameter verified="1" type="double" name=""/>
			<as_return type="string&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string&amp; opAssign(float)" name="opAssign">
			<as_parameter verified="1" type="float" name=""/>
			<as_return type="string&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string&amp; opAssign(int64)" name="opAssign">
			<as_parameter verified="1" type="int64" name=""/>
			<as_return type="string&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string&amp; opAssign(uint64)" name="opAssign">
			<as_parameter verified="1" type="uint64" name=""/>
			<as_return type="string&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string opAdd(bool) const" name="opAdd">
			<as_parameter verified="1" type="bool" name=""/>
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string opAdd(const string&amp;in) const" name="opAdd">
			<as_parameter verified="1" type="const string&amp;" name=""/>
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string opAdd(double) const" name="opAdd">
			<as_parameter verified="1" type="double" name=""/>
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string opAdd(float) const" name="opAdd">
			<as_parameter verified="1" type="float" name=""/>
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string opAdd(int64) const" name="opAdd">
			<as_parameter verified="1" type="int64" name=""/>
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string opAdd(uint64) const" name="opAdd">
			<as_parameter verified="1" type="uint64" name=""/>
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string opAdd_r(bool) const" name="opAdd_r">
			<as_parameter verified="1" type="bool" name=""/>
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string opAdd_r(double) const" name="opAdd_r">
			<as_parameter verified="1" type="double" name=""/>
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string opAdd_r(float) const" name="opAdd_r">
			<as_parameter verified="1" type="float" name=""/>
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string opAdd_r(int64) const" name="opAdd_r">
			<as_parameter verified="1" type="int64" name=""/>
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string opAdd_r(uint64) const" name="opAdd_r">
			<as_parameter verified="1" type="uint64" name=""/>
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string substr(uint start = 0, int count = - 1) const" name="substr">
			<as_parameter verified="1" type="uint" name="start" default="0"/>
			<as_parameter verified="1" type="int" name="count" default="- 1"/>
			<as_return type="string" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="uint8&amp; opIndex(uint)" name="opIndex">
			<as_parameter verified="1" type="uint" name=""/>
			<as_return type="uint8" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="uint get_length() const" name="get_length">
			<as_return type="uint" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="uint length() const" name="length">
			<as_return type="uint" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="uint size() const" name="size">
			<as_return type="uint" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void resize(uint)" name="resize">
			<as_parameter verified="1" type="uint" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void set_length(uint)" name="set_length">
			<as_parameter verified="1" type="uint" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="sweep" base="solid">
		<as_description>
			<as_line>a sweep creates a solid by sweeping a 2d profile along a path curve</as_line>
		</as_description>
		<as_constructor verified="1" signature="sweep@ sweep(const shape2d@ shape, const spline_path@ path)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="shape">
				<as_description>
					<as_line>2d profile shape to sweep</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="spline_path@" name="path">
				<as_description>
					<as_line>The path cirve to sweep along</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_description>
				<as_line>return bounding box</as_line>
			</as_description>
			<as_return type="boundingbox@" verified="1">
				<as_description>
					<as_line>The bounding box of the sweep</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_parameter verified="1" type="string" name="path"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_parameter verified="1" type="string" name="path"/>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0"/>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="tmatrix">
		<as_description>
			<as_line>a tmatrix an abstract base class for all transformations.</as_line>
		</as_description>
		<as_member_function verified="1" signature="hmatrix@ opCast()" name="opCast">
			<as_return type="hmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="mirror@ opCast()" name="opCast">
			<as_return type="mirror@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opMul(pos2d@ obj)" name="opMul">
			<as_parameter verified="1" type="pos2d@" name="obj"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opMul(pos3d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a point: pos3d@ p = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="pos3d@" name="obj">
				<as_description>
					<as_line>position to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="pos3d@" verified="1">
				<as_description>
					<as_line>transformed position</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ origin() const" name="origin">
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="rotate_x@ opCast()" name="opCast">
			<as_return type="rotate_x@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="rotate_y@ opCast()" name="opCast">
			<as_return type="rotate_y@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="rotate_z@ opCast()" name="opCast">
			<as_return type="rotate_z@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="scale@ opCast()" name="opCast">
			<as_return type="scale@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(shape2d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a 2d shape: shape2d@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(solid@ obj)" name="opMul">
			<as_description>
				<as_line>transform a solid: solid@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opMul(const tmatrix@ B)" name="opMul">
			<as_description>
				<as_line>matrix multiplication: A = T*B</as_line>
			</as_description>
			<as_parameter verified="1" type="tmatrix@" name="B">
				<as_description>
					<as_line>matrix to be post-multiplied with this matrix</as_line>
				</as_description>
			</as_parameter>
			<as_return type="tmatrix@" verified="1">
				<as_description>
					<as_line>resulting matrixt</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="translate@ opCast()" name="opCast">
			<as_return type="translate@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ xdir() const" name="xdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ ydir() const" name="ydir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ zdir() const" name="zdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void dump() const" name="dump">
			<as_description>
				<as_line>dump matrix to console</as_line>
			</as_description>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="transform_extrude" base="solid">
		<as_description>
			<as_line>transform_extrude is a special extrision operation, defined by two 2d shapes,</as_line>
			<as_line>representing bottom and top of extrusion.</as_line>
		</as_description>
		<as_constructor verified="1" signature="transform_extrude@ transform_extrude(const shape2d@ bottom, const shape2d@ top)">
			<as_parameter verified="1" type="shape2d@" name="bottom"/>
			<as_parameter verified="1" type="shape2d@" name="top"/>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="translate" base="tmatrix">
		<as_description>
			<as_line>translate is a transformation translating a 2d or 3d object.</as_line>
		</as_description>
		<as_constructor verified="1" signature="translate@ translate(const vec3d@ v)">
			<as_parameter verified="1" type="vec3d@" name="v"/>
		</as_constructor>
		<as_constructor verified="1" signature="translate@ translate(double dx, double dy, double dz = 0.0)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="dx">
				<as_description>
					<as_line>translation in x direction</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="dy">
				<as_description>
					<as_line>translation in y direction</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="dz" default="0.0">
				<as_description>
					<as_line>translation in z direction</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="double dx() const" name="dx">
			<as_description>
				<as_line>translation in x direction</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>translation in x direction</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double dy() const" name="dy">
			<as_description>
				<as_line>translation in y direction</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>translation in y direction</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double dz() const" name="dz">
			<as_description>
				<as_line>translation in z direction</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>translation in z direction</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos2d@ opMul(pos2d@ obj)" name="opMul">
			<as_parameter verified="1" type="pos2d@" name="obj"/>
			<as_return type="pos2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ opMul(pos3d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a point: pos3d@ p = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="pos3d@" name="obj">
				<as_description>
					<as_line>position to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="pos3d@" verified="1">
				<as_description>
					<as_line>transformed position</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="pos3d@ origin() const" name="origin">
			<as_return type="pos3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(shape2d@ obj)" name="opMul">
			<as_description>
				<as_line>transform a 2d shape: shape2d@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(solid@ obj)" name="opMul">
			<as_description>
				<as_line>transform a solid: solid@ s = T*obj;</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="obj">
				<as_description>
					<as_line>object to be transformed</as_line>
				</as_description>
			</as_parameter>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>transformed object</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opImplCast()" name="opImplCast">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ opMul(const tmatrix@ B)" name="opMul">
			<as_description>
				<as_line>matrix multiplication: A = T*B</as_line>
			</as_description>
			<as_parameter verified="1" type="tmatrix@" name="B">
				<as_description>
					<as_line>matrix to be post-multiplied with this matrix</as_line>
				</as_description>
			</as_parameter>
			<as_return type="tmatrix@" verified="1">
				<as_description>
					<as_line>resulting matrixt</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ xdir() const" name="xdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ ydir() const" name="ydir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ zdir() const" name="zdir">
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void dump() const" name="dump">
			<as_description>
				<as_line>dump matrix to console</as_line>
			</as_description>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="union2d" base="shape2d">
		<as_description>
			<as_line>union2d is a 2-dimensional boolean operation. It can be invoked either</as_line>
			<as_line>explicitly or using + operator:</as_line>
			<as_line>explicit: shape2d@ object = union2d(circle(100),translate(75,0,0)*circle(50));</as_line>
			<as_line>using &amp; operator: shape2d@ object = circle(100) + translate(75,0,0)*circle(50);</as_line>
		</as_description>
		<as_constructor verified="1" signature="union2d@ union2d(const shape2d@ s1, const shape2d@ s2)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="s1">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s2">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="union2d@ union2d(const shape2d@ s1, const shape2d@ s2, const shape2d@ s3)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="s1">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s2">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s3">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="union2d@ union2d(const shape2d@ s1, const shape2d@ s2, const shape2d@ s3, const shape2d@ s4)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="s1">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s2">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s3">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s4">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="union2d@ union2d(const shape2d@ s1, const shape2d@ s2, const shape2d@ s3, const shape2d@ s4, const shape2d@ s5)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="s1">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s2">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s3">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s4">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="shape2d@" name="s5">
				<as_description>
					<as_line>2d shape</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="union2d@ union2d(shape2d@[]@ arr)">
			<as_parameter verified="1" type="array@" name="arr"/>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAdd(shape2d@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opAnd(shape2d@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opImplCast()" name="opImplCast">
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="shape2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape2d@ opSub(shape2d@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="shape2d@" name="b"/>
			<as_return type="shape2d@" verified="1">
				<as_description>
					<as_line>resulting 2d shape</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="union3d" base="solid">
		<as_description>
			<as_line>union3d is a 3-dimensional boolean operation. It can be invoked either</as_line>
			<as_line>explicitly or using + operator:</as_line>
			<as_line>explicit: solid@ object = union3d(sphere(100),translate(75,0,0)*sphere(50));</as_line>
			<as_line>using &amp; operator: solid@ object = sphere(100) + translate(75,0,0)*sphere(50);</as_line>
		</as_description>
		<as_constructor verified="1" signature="union3d@ union3d(const solid@ s1, const solid@ s2)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="s1">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s2">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="union3d@ union3d(const solid@ s1, const solid@ s2, const solid@ s3)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="s1">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s2">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s3">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="union3d@ union3d(const solid@ s1, const solid@ s2, const solid@ s3, const solid@ s4)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="s1">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s2">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s3">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s4">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="union3d@ union3d(const solid@ s1, const solid@ s2, const solid@ s3, const solid@ s4, const solid@ s5)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="s1">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s2">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s3">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s4">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="solid@" name="s5">
				<as_description>
					<as_line>solid</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="union3d@ union3d(solid@[]@ arr)">
			<as_parameter verified="1" type="array@" name="arr"/>
		</as_constructor>
		<as_member_function verified="1" signature="boundingbox@ box() const" name="box">
			<as_return type="boundingbox@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="shape@ opImplCast()" name="opImplCast">
			<as_return type="shape@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAdd(solid@ b)" name="opAdd">
			<as_description>
				<as_line>Boolean union operator+ overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opAnd(solid@ b)" name="opAnd">
			<as_description>
				<as_line>Boolean intersection operator&amp; overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opImplCast()" name="opImplCast">
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opMul(tmatrix@ matrix)" name="opMul">
			<as_parameter verified="1" type="tmatrix@" name="matrix"/>
			<as_return type="solid@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="solid@ opSub(solid@ b)" name="opSub">
			<as_description>
				<as_line>Boolean difference operator- overload</as_line>
			</as_description>
			<as_parameter verified="1" type="solid@" name="b"/>
			<as_return type="solid@" verified="1">
				<as_description>
					<as_line>resulting solid</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>Object type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>type name string</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="tmatrix@ transform() const" name="transform">
			<as_return type="tmatrix@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_csg(string path)" name="write_csg">
			<as_description>
				<as_line>Write to OpenSCAD .csg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void write_xcsg(string path, double secant_tolerance = - 1.0)" name="write_xcsg">
			<as_description>
				<as_line>Write to AngelCAD .xcsg file</as_line>
			</as_description>
			<as_parameter verified="1" type="string" name="path">
				<as_description>
					<as_line>file path</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="secant_tolerance" default="- 1.0">
				<as_description>
					<as_line>tolerance for geometry precision</as_line>
				</as_description>
			</as_parameter>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="unordered_map">
		<as_constructor verified="1" signature="unordered_map&lt;T_key,T_value&gt;@ unordered_map(int&amp;in)">
			<as_parameter verified="1" type="int" name=""/>
		</as_constructor>
		<as_constructor verified="1" signature="unordered_map&lt;T_key,T_value&gt;@ unordered_map(int&amp;in, unordered_map&lt;T_key,T_value&gt;@)">
			<as_parameter verified="1" type="int" name=""/>
			<as_parameter verified="1" type="unordered_map@" name=""/>
		</as_constructor>
		<as_member_function verified="1" signature="T_value&amp; find(const T_key&amp;in)" name="find">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_return type="T_value&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="T_value&amp; find(const T_key&amp;in, bool&amp;out)" name="find">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_parameter verified="1" type="bool" name=""/>
			<as_return type="T_value&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool contains(const T_key&amp;in)" name="contains">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool empty()" name="empty">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool erase(const unordered_map_iterator&lt;T_key,T_value&gt;&amp;in)" name="erase">
			<as_parameter verified="1" type="const unordered_map_iterator&amp;" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="const T_value&amp; get_opIndex(const T_key&amp;in) const" name="get_opIndex">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_return type="const T_value&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int erase(const unordered_map_iterator&lt;T_key,T_value&gt;&amp;in, const unordered_map_iterator&lt;T_key,T_value&gt;&amp;in)" name="erase">
			<as_parameter verified="1" type="const unordered_map_iterator&amp;" name=""/>
			<as_parameter verified="1" type="const unordered_map_iterator&amp;" name=""/>
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="int size()" name="size">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="unordered_map&lt;T_key,T_value&gt;&amp; opAssign(unordered_map&lt;T_key,T_value&gt;@)" name="opAssign">
			<as_parameter verified="1" type="unordered_map@" name=""/>
			<as_return type="unordered_map&amp;@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="unordered_map&lt;T_key,T_value&gt;&amp; swap(unordered_map&lt;T_key,T_value&gt;&amp;inout)" name="swap">
			<as_parameter verified="1" type="unordered_map&amp;@" name=""/>
			<as_return type="unordered_map&amp;@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="unordered_map_iterator&lt;T_key,T_value&gt; begin()" name="begin">
			<as_return type="unordered_map_iterator" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="unordered_map_iterator&lt;T_key,T_value&gt; end()" name="end">
			<as_return type="unordered_map_iterator" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="unordered_map_iterator&lt;T_key,T_value&gt; find_iterator(const T_key&amp;in)" name="find_iterator">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_return type="unordered_map_iterator" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void SetDirectcomp(bool)" name="SetDirectcomp">
			<as_parameter verified="1" type="bool" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void clear()" name="clear">
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void erase(const T_key&amp;in)" name="erase">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void insert(const T_key&amp;in, const T_value&amp;in)" name="insert">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_parameter verified="1" type="const T_value&amp;" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void set_opIndex(const T_key&amp;in, const T_value&amp;in)" name="set_opIndex">
			<as_parameter verified="1" type="const T_key&amp;" name=""/>
			<as_parameter verified="1" type="const T_value&amp;" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="unordered_map_iterator">
		<as_member_function verified="1" signature="T_value&amp; current_value()" name="current_value">
			<as_return type="T_value&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="T_value&amp; get_value()" name="get_value">
			<as_return type="T_value&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool IsEnd()" name="IsEnd">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool IsValid()" name="IsValid">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool next()" name="next">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool opEquals(const unordered_map_iterator&lt;T_key,T_value&gt;&amp;in)" name="opEquals">
			<as_parameter verified="1" type="const unordered_map_iterator&amp;" name=""/>
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool opPostInc()" name="opPostInc">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="bool opPreInc()" name="opPreInc">
			<as_return type="bool" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="const T_key&amp; current_key()" name="current_key">
			<as_return type="const T_key&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="const T_key&amp; get_key()" name="get_key">
			<as_return type="const T_key&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="unordered_map_iterator&lt;T_key,T_value&gt;&amp; opAssign(const unordered_map_iterator&lt;T_key,T_value&gt;&amp;in)" name="opAssign">
			<as_parameter verified="1" type="const unordered_map_iterator&amp;" name=""/>
			<as_return type="unordered_map_iterator&amp;" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void set_value(const T_value&amp;in)" name="set_value">
			<as_parameter verified="1" type="const T_value&amp;" name=""/>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="vec2d">
		<as_description>
			<as_line>vec2d is a 2-dimensional vector offering useful operations such as dot and cross products.</as_line>
		</as_description>
		<as_constructor verified="1" signature="vec2d@ vec2d(const pos2d@ p1, const pos2d@ p2)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="pos2d@" name="p1">
				<as_description>
					<as_line>vector start position</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="pos2d@" name="p2">
				<as_description>
					<as_line>vector end position</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_constructor verified="1" signature="vec2d@ vec2d(const vec2d@ other)">
			<as_parameter verified="1" type="vec2d@" name="other"/>
		</as_constructor>
		<as_constructor verified="1" signature="vec2d@ vec2d(double x, double y)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="x">
				<as_description>
					<as_line>vector x component</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="y">
				<as_description>
					<as_line>vector y component</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="double angle(const vec2d@ other) const" name="angle">
			<as_description>
				<as_line>angle between: double rad = v.angle(other);</as_line>
			</as_description>
			<as_parameter verified="1" type="vec2d@" name="other">
				<as_description>
					<as_line>vector to compute angle relative to this</as_line>
				</as_description>
			</as_parameter>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>angle value in radians</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double cross(const vec2d@ other) const" name="cross">
			<as_description>
				<as_line>cross product: double cp = v.cross(other);</as_line>
			</as_description>
			<as_parameter verified="1" type="vec2d@" name="other">
				<as_description>
					<as_line>vector to multiply with</as_line>
				</as_description>
			</as_parameter>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>cross product value</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double dot(const vec2d@ other) const" name="dot">
			<as_description>
				<as_line>dot product: double cp = v.dot(other);</as_line>
			</as_description>
			<as_parameter verified="1" type="vec2d@" name="other">
				<as_description>
					<as_line>vector to multiply with</as_line>
				</as_description>
			</as_parameter>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>dot product value</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double length() const" name="length">
			<as_description>
				<as_line>length of vector</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>length of vector</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double x() const" name="x">
			<as_description>
				<as_line>vector x component</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>vector x component</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double y() const" name="y">
			<as_description>
				<as_line>vector y component</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>vector y component</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="vec2d@ opAdd(vec2d@ v1)" name="opAdd">
			<as_parameter verified="1" type="vec2d@" name="v1"/>
			<as_return type="vec2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec2d@ opMul(double f1)" name="opMul">
			<as_parameter verified="1" type="double" name="f1"/>
			<as_return type="vec2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec2d@ opMul_r(double f1)" name="opMul_r">
			<as_parameter verified="1" type="double" name="f1"/>
			<as_return type="vec2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec2d@ opSub(vec2d@ v1)" name="opSub">
			<as_parameter verified="1" type="vec2d@" name="v1"/>
			<as_return type="vec2d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void normalise()" name="normalise">
			<as_description>
				<as_line>normalise vector length</as_line>
			</as_description>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
	<as_class verified="1" name="vec3d">
		<as_description>
			<as_line>vec3d is a 3-dimensional vector offering useful operations such as dot and cross products.</as_line>
		</as_description>
		<as_constructor verified="1" signature="vec3d@ vec3d(const pos3d@ p1, const pos3d@ p2)">
			<as_parameter verified="1" type="pos3d@" name="p1"/>
			<as_parameter verified="1" type="pos3d@" name="p2"/>
		</as_constructor>
		<as_constructor verified="1" signature="vec3d@ vec3d(const vec3d@ other)">
			<as_parameter verified="1" type="vec3d@" name="other"/>
		</as_constructor>
		<as_constructor verified="1" signature="vec3d@ vec3d(double x, double y, double z)">
			<as_description>
				<as_line>constructor</as_line>
			</as_description>
			<as_parameter verified="1" type="double" name="x">
				<as_description>
					<as_line>vector x component</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="y">
				<as_description>
					<as_line>vector y component</as_line>
				</as_description>
			</as_parameter>
			<as_parameter verified="1" type="double" name="z">
				<as_description>
					<as_line>vector z component</as_line>
				</as_description>
			</as_parameter>
		</as_constructor>
		<as_member_function verified="1" signature="double angle(const vec3d@ other) const" name="angle">
			<as_description>
				<as_line>angle between: double rad = v.angle(other);</as_line>
			</as_description>
			<as_parameter verified="1" type="vec3d@" name="other">
				<as_description>
					<as_line>vector to compute angle relative to this</as_line>
				</as_description>
			</as_parameter>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>angle value in radians</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double dot(const vec3d@ other) const" name="dot">
			<as_description>
				<as_line>dot product: double cp = v.dot(other);</as_line>
			</as_description>
			<as_parameter verified="1" type="vec3d@" name="other">
				<as_description>
					<as_line>vector to multiply with</as_line>
				</as_description>
			</as_parameter>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>dot product value</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double length() const" name="length">
			<as_description>
				<as_line>length of vector</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>length of vector</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double x() const" name="x">
			<as_description>
				<as_line>vector x component</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>vector x component</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double y() const" name="y">
			<as_description>
				<as_line>vector y component</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>vector y component</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="double z() const" name="z">
			<as_description>
				<as_line>vector z component</as_line>
			</as_description>
			<as_return type="double" verified="1">
				<as_description>
					<as_line>vector z component</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="int Refcount() const" name="Refcount">
			<as_return type="int" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="string Type() const" name="Type">
			<as_description>
				<as_line>class type string</as_line>
			</as_description>
			<as_return type="string" verified="1">
				<as_description>
					<as_line>string containing type name</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ cross(const vec3d@ other) const" name="cross">
			<as_description>
				<as_line>cross product: double cp = v.cross(other);</as_line>
			</as_description>
			<as_parameter verified="1" type="vec3d@" name="other">
				<as_description>
					<as_line>vector to multiply with</as_line>
				</as_description>
			</as_parameter>
			<as_return type="vec3d@" verified="1">
				<as_description>
					<as_line>cross product value</as_line>
				</as_description>
			</as_return>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ opAdd(vec3d@ v1)" name="opAdd">
			<as_parameter verified="1" type="vec3d@" name="v1"/>
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ opMul(double f1)" name="opMul">
			<as_parameter verified="1" type="double" name="f1"/>
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ opMul_r(double f1)" name="opMul_r">
			<as_parameter verified="1" type="double" name="f1"/>
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="vec3d@ opSub(vec3d@ v1)" name="opSub">
			<as_parameter verified="1" type="vec3d@" name="v1"/>
			<as_return type="vec3d@" verified="1"/>
		</as_member_function>
		<as_member_function verified="1" signature="void normalise()" name="normalise">
			<as_description>
				<as_line>normalise vector length</as_line>
			</as_description>
			<as_return type="void" verified="1"/>
		</as_member_function>
	</as_class>
</as_xml>
